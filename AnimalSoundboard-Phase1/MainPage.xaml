<!--
This the XAML page that represents the visual UI portion of our app.   
On this page, we add UI elements called "controls" which all sorts of UI elements, from a button to a textbox.
These UI elements can be styled and configured with various properties to achieve the UI look and feel you desire.
-->    
<Page
    x:Class="AnimalSoundboard_Phase1.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AnimalSoundboard_Phase1"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
    
    <!--
    This is a Grid control.
    It allows you to configure the placement of your other controls using column and row definitions.
    The actual grid lines of the grid can be visualized in the design view of your page.
    -->
    
    <Grid x:Name="RootGrid" Background="LightYellow">
        
        <!--
        Here are your grids Row and Column definitions.
        You can define as many rows or columns as you'd like and manage their relative widths and heights.
        This grid has 3 rows and 2 columns.
        The star (*) is a helpful way to define heights.
        1* means the row will take up 1 portion of the available space
        3* means 3 portions
        For the setup below you get:
        1* => 1/5
        3* => 3/5
        1* => 1/5
        -->
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="3*"/>
            <RowDefinition Height="1*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>
        
        <!--
        Here is a TextBlock control, which simply displays text.
        An important property to note is "Grid.ColumnSpan," which says this content will span two columns in the grid its placed in.
        Because no rows or columns are specified for this TextBlock, it sits in Row 0, Column 0.
        -->
        <TextBlock VerticalAlignment="Center"
                   HorizontalAlignment="Center"
                   FontSize="80"
                   Grid.ColumnSpan="2"
                   FontWeight="ExtraBlack"
                   Foreground="LightCoral"> Animal Soundboard</TextBlock>
        
        <!--
        Here we have a clickable button control.
        This button is placed in Row 1, Column 0.
        It is bound to functionality with the "Click" property, which maps to a function that can be in the .cs file for this page.
        -->
        <Button Grid.Row="1"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                FontSize="50" Click="Cow_Button_Click">🐄 Cow 🐄</Button>
        
        <!-- Another button in Row 1, Column 1-->
        <Button Grid.Row="1"
                Grid.Column="1"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                FontSize="50"
                Click="Chicken_Button_Click">🐔 Chicken 🐔</Button>

        <!-- Another textblock in Row 2, Column 0, ColumnSpan 2-->
        <TextBlock HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   FontSize="45"
                   Foreground="CornflowerBlue"
                   FontWeight="ExtraBlack"
                   Grid.ColumnSpan="2"
                   Grid.Row="2">Click on a button to hear an animal noise!</TextBlock>
    </Grid>
</Page>
